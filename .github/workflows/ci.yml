name: CI Pipeline

# Trigger the workflow on push to main/master and pull requests
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  # Allow manual triggering
  workflow_dispatch:

# Set environment variables
env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: Environment Consistency Check
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Create virtual environment
      run: |
        python -m venv venv
        source venv/bin/activate
        echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
        echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH
    
    - name: Upgrade pip and install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Verify environment setup
      run: |
        python verify_setup.py
    
    - name: Run verification and smoke tests
      env:
        # Mock API token for testing (tests should handle missing token gracefully)
        REPLICATE_API_TOKEN: ${{ secrets.REPLICATE_API_TOKEN || 'mock-token-for-testing' }}
      run: |
        python run_tests.py
    
    - name: Check code style (if applicable)
      run: |
        # Install code style checkers
        pip install flake8 black --quiet || true
        
        # Run flake8 if installed (non-blocking)
        if command -v flake8 &> /dev/null; then
          echo "Running flake8 code style check..."
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true
        fi
        
        # Check if code would be reformatted by black (non-blocking)
        if command -v black &> /dev/null; then
          echo "Checking black code formatting..."
          black --check --diff . || true
        fi
    
    - name: Test dependency installation from scratch
      if: matrix.python-version == '3.11'
      run: |
        # Create a fresh virtual environment to test clean installation
        python -m venv fresh_venv
        source fresh_venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt
        python -c "import sys; print(f'Fresh install test passed with Python {sys.version}')"
    
    - name: Generate dependency report
      if: matrix.python-version == '3.11'
      run: |
        echo "=== Installed Packages ==="
        pip list
        echo ""
        echo "=== Dependency Tree ==="
        pip install pipdeptree --quiet
        pipdeptree
    
    - name: Check for security vulnerabilities
      if: matrix.python-version == '3.11'
      run: |
        pip install safety --quiet
        safety check --json || echo "Security check completed (some issues may be acceptable)"

  # Additional job for checking requirements.txt consistency
  requirements-check:
    name: Requirements Consistency
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Check requirements.txt format
      run: |
        echo "Checking requirements.txt format and consistency..."
        
        # Check if requirements.txt exists
        if [ ! -f requirements.txt ]; then
          echo "❌ requirements.txt not found!"
          exit 1
        fi
        
        # Check for common issues in requirements.txt
        echo "✅ requirements.txt exists"
        
        # Check for version pinning
        if grep -q "==" requirements.txt; then
          echo "ℹ️  Found exact version pins (==) in requirements.txt"
        fi
        
        if grep -q ">=" requirements.txt; then
          echo "ℹ️  Found minimum version constraints (>=) in requirements.txt"
        fi
        
        # Check for common dependency conflicts
        echo "Checking for potential dependency conflicts..."
        python -c "import re; f=open('requirements.txt','r'); content=f.read(); f.close(); packages=[line.strip() for line in content.split('\n') if line.strip() and not line.startswith('#')]; print(f'Found {len(packages)} package requirements'); [print(f'  - {pkg}') for pkg in packages[:5]]; print(f'  ... and {len(packages) - 5} more') if len(packages) > 5 else None"
    
    - name: Test clean installation
      run: |
        python -m venv test_venv
        source test_venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt
        echo "✅ Clean installation successful"
        
        # Test critical imports
        python -c "import replicate, requests, numpy, torch; print('✅ Critical imports successful')"

